#!/bin/sh

# Copyright (c) 2016, Carsten Kunze <carsten.kunze@arcor.de>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

usage () {
	echo "Usage: $0 [-s]"
	echo "	-s	Silence output"
	exit $1
}

check_for () {
	[ -e $LOG ] && echo >>$LOG
	A="Checking for $1 ... "
	echo "$A" >>$LOG
	[ -z "$SFLAG" ] && printf "$A"
}

compile () {
	rm -f ${TMPNAM}.o $TMPNAM
	$MAKE -f $OUTMK $TMPNAM >> $LOG 2>&1
}

test_result () {
	RESULT=$?
	NO_FAIL_TEXT=$1
	if [ $RESULT -eq 0 ]; then
		echo success >>$LOG
		[ -z "$SFLAG" ] && echo $PASS_TEXT
		[ -e $TMPC ] && rm -f $TMPC
		PASS_TEXT=yes
		true
	else
		[ -z "$SFLAG" -a -z "$NO_FAIL_TEXT" ] && echo no
		if [ -e $TMPC ]; then
			echo "Failed program:" >>$LOG
			pr -n -t $TMPC >>$LOG
			rm -f $TMPC
		fi
		PASS_TEXT=yes
		false
	fi
}

gen_mk () {
	rm -f $OUTMK
	[ -n "$FLOAT_STORE" ] && echo "FLOAT_STORE=$FLOAT_STORE" >> $OUTMK
	[ -n "$DEFS" ] && echo "DEFINES=$DEFS" >> $OUTMK
	[ -n "$INCDIR_CURSES" ] && echo "INCDIR_CURSES=$INCDIR_CURSES" >> $OUTMK
	[ -n "$RPATH_CURSES" ] && echo "RPATH_CURSES=$RPATH_CURSES" >> $OUTMK
	[ -n "$LIBDIR_CURSES" ] && echo "LIBDIR_CURSES=$LIBDIR_CURSES" \
	    >> $OUTMK
	[ -n "$LIB_CURSES" ] && echo "LIB_CURSES=$LIB_CURSES" >> $OUTMK
	cat $INMK >> $OUTMK || exit 1
}

check_make () {
	check_for "make(1)"

	cat <<EOT >$TMPMK
all:
	true
EOT
	make -f $TMPMK >> $LOG 2>&1
	test_result && {
		MAKE=make
		return
	}

	echo "Failed makefile:" >>$LOG
	pr -n -t $TMPMK >>$LOG

	check_for "bmake(1)"

	cat <<EOT >$TMPMK
all:
	true
EOT
	bmake -f $TMPMK >> $LOG 2>&1
	test_result && MAKE=bmake
}

check_float_store () {
	FLOAT_STORE=-ffloat-store
	check_for "$FLOAT_STORE"
	cat <<EOT >$TMPC
int
main (int argc, char **argv) {
return 0;
}
EOT
	gen_mk
	cat <<EOT >>$OUTMK
${TMPNAM}.o:
	\$(CC) $FLOAT_STORE -c $TMPC
EOT
	rm -f ${TMPNAM}.o
	$MAKE -f $OUTMK ${TMPNAM}.o >> $LOG 2> $TMPNAM
	cat $TMPNAM >> $LOG
	if [ -s $TMPNAM ]; then false; else true; fi
	test_result || FLOAT_STORE=
}

check_strlcpy () {
	check_for "strlcpy(3)"

	cat <<EOT >$TMPC
#include <string.h>
int
main (int argc, char **argv) {
	char a[10];
	strlcpy(a, *argv, sizeof a);
	return 0;
}
EOT
	compile
	test_result && DEFS="$DEFS -DHAVE_STRLCPY"
}

check_strlcat () {
	check_for "strlcat(3)"

	cat <<EOT >$TMPC
#include <string.h>
int
main (int argc, char **argv) {
	char a[10];
	*a = 0;
	strlcat(a, *argv, sizeof a);
	return 0;
}
EOT
	compile
	test_result && DEFS="$DEFS -DHAVE_STRLCAT"
}

check_wcslcpy () {
	check_for "wcslcpy(3)"

	cat <<EOT >$TMPC
#include <stdio.h>
#include <wchar.h>
int
main (int argc, char **argv) {
	wchar_t a, b;
	a = getwchar();
	wcslcpy(&b, &a, 1);
	return 0;
}
EOT
	compile
	test_result && DEFS="$DEFS -DHAVE_WCSLCPY"
}

compile_curses () {
	cat <<EOT >$TMPC
#include "compat.h"
int
main (int argc, char **argv) {
	return 0;
}
EOT
	gen_mk
	cat <<EOT >>$OUTMK
$TMPNAM: ${TMPNAM}.o
	\$(CC) $RPATH_CURSES -o \$@ ${TMPNAM}.o $LIBDIR_CURSES $LIB_CURSES
EOT
	compile
	test_result 1
}

test_curses () {
	check_for $LIB_CURSES

	compile_curses && return
	[ $# -gt 0 ] && for i in $*; do
		compile_curses $i && return
	done
}

check_ncursesw () {
	ODEFS=$DEFS
	LIB_CURSES="-lncursesw"
	DEFS="$DEFS -DHAVE_NCURSESW_CURSES_H"
	INCDIR_CURSES="-I/usr/pkg/include"
	RPATH_CURSES="-Wl,-rpath,/usr/pkg/lib"
	LIBDIR_CURSES="-L/usr/pkg/lib"
	PASS_TEXT="in /usr/pkg/lib"
	test_curses && return
	echo no
	DEFS=$ODEFS
	INCDIR_CURSES=
	RPATH_CURSES=
	LIBDIR_CURSES=
	false
}

check_lib_curses () {
	check_ncursesw && return
	LIB_CURSES="-lcurses"
	test_curses && return
	echo no
	LIB_CURSES="-lncurses"
	test_curses && return
	echo no
}

check_fixterm () {
	check_for fixterm

	cat <<EOT >$TMPC
#include "compat.h"
int
main (int argc, char **argv) {
	fixterm();
	return 0;
}
EOT
	gen_mk
	cat <<EOT >>$OUTMK
$TMPNAM: ${TMPNAM}.o
	\$(CC) -o \$@ ${TMPNAM}.o $LIBDIR_CURSES $LIB_CURSES
EOT
	compile
	test_result && DEFS="$DEFS -DHAVE_FIXTERM"
}

check_resetterm () {
	check_for resetterm

	cat <<EOT >$TMPC
#include "compat.h"
int
main (int argc, char **argv) {
	resetterm();
	return 0;
}
EOT
	gen_mk
	cat <<EOT >>$OUTMK
$TMPNAM: ${TMPNAM}.o
	\$(CC) -o \$@ ${TMPNAM}.o $LIBDIR_CURSES $LIB_CURSES
EOT
	compile
	test_result && DEFS="$DEFS -DHAVE_RESETTERM"
}

SFLAG=

while [ $# -gt 0 ]; do
	case $1 in
	-s) SFLAG=1;;
	*)
		echo "$0: $1: Unknown option" >&2
		usage 1;;
	esac
	shift
done

OUTMK=Makefile
INMK=${OUTMK}.in
CFG=config
TMPNAM=.$CFG
TMPMK=${TMPNAM}.mk
TMPC=${TMPNAM}.c
LOG=${CFG}.log
rm -f $OUTMK $LOG
MAKE=
DEFS=
LIB_CURSES=
gen_mk

check_make
check_float_store
check_strlcpy
check_strlcat
#check_wcslcpy
check_lib_curses
check_fixterm
check_resetterm

gen_mk
rm -f $TMPNAM*
